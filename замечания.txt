
+ 1. У вас в resources ненужный файл shema.sql, удалите его


2. В readme у вас некорректные команды для запуска тестов. Например, .\gradlew clean test -D dbUrl=jdbc:mysql://localhost:3306/app -D dbUser=app -D dbPass=pass у вас некорректно прописаны названия передаваемых параметров, они не соответствуют тому, что у вас в build.gradle. Необходимо исправить. Чтобы было понятнее как это работает, я приложу описание после основных пунктов

+ 3. В классе ApiHelper у вас во всех методах передаваемый в методы параметр нигде не используется, удалите его

4. Там же у вас захардкожен адрес приложения http://localhost:9999. Зарегистрируйте в build.gradle переменную окружения аналогично тому, как реализовано для параметров подключения к БД и используйте значение этой переменной окружения

5. В DataHelper методы getValidYearPlusOne, getPreviousYear и getPlusSixYear с практически одинаковой реализацией. Объедините эти методы в один с реализацией return LocalDate.now().plusYears(shiftYears).format(DateTimeFormatter.ofPattern("yy"));, передавая в него параметр shiftYears, на который вам необходимо подвинуть текущий год. Положительное число - сдвиг вперед, отрицательное - назад, 0 - для получения текущего месяца

6. Аналогичено сделайте для методов getValidMonth и getPreviousMonth

7. В классе SQLHelper в методе start у вас захардкожены логин и пароль для подключения к БД, хотя в build.gradle у вас есть зарегистрированные переменные окружения для этого, используйте значения этих переменных для подключения к БД

8. Из класса PaymentPage методы payDebitCard и buyCreditCard необходимо перенести в MainPage, так как эти методы относятся именно к главной странице приложения

9. При этом в MainPage не должно быть static полей, так как реализация паттерна page object не подразумевает использование static методов или переменных

10. В PaymentPage все методы для заполнения формы объедините в один, так как они все с одинаковой реализацией. У вас должен быть один метод, в который вы передаете объект типа DataHelper.CardInfo, в котором будут передаваться корректные или некорректные тестовые данные


Параметризация приложения

Приложение. У вас в application.properties заданы параметры для подключения к БД. Также, эти параметры можно задать другим способом - в командной строке. Чтобы не изменять код, но поменять параметры подключения мы просто запускаем приложение с использованием обновленных параметров (точно с такими же именами как в файле) - java -Dspring.datasource.url=jdbc:postgresql://localhost:5432/kuularbase -Dspring.datasource.username=kuular -Dspring.datasource.password=12345v -jar aqa-shop.jar. Иногда в windows нужно добавить кавычки - java “-Dspring.datasource.url=jdbc:postgresql://localhost:5432/kuularbase” “-Dspring.datasource.username=kuular” “-Dspring.datasource.password=12345v” -jar aqa-shop.jar

С тестами чуть больше действий. а) определить переменные окружения в build.gradle аналогично тому, как у вас определена selenide.headless. Именовать новые параметры можете как угодно б) В коде, чтобы получить значения этих переменных, мы делаем так - var value = System.getProperty(“your.parameter”); в) а передаем значения этих переменных так же в командной строке - ./gradlew test -Dyour.parameter=your_value. Новые переменные можете именовать как угодно, важно, чтобы имена в командной строке, в файле build.gradle и в коде совпадали. И последнее: для этих переменных можно задать в build.gradle значения по умолчанию, они будут применяться, если в командной строке параметры не переданы или если вы запускаете тесты не из терминала, а кнопкой в ide. Выглядит в build.gradle это так - systemProperty ‘your.parameter’, System.getProperty(‘your.parameter’, “default_value”)
















